double
UniformPlanarArray::GetRadiationPattern (double thetaRadian, double phiRadian) const
{
  if (m_isIsotropic)
  {
    return 0;
  }

  // convert the angles in degrees
  double thetaDeg = thetaRadian * 180 / M_PI;
  double phiDeg = phiRadian * 180 / M_PI;
  NS_ASSERT_MSG (thetaDeg >= 0 && thetaDeg <= 180, "the vertical angle should be the range of [0,180]");
  NS_ASSERT_MSG (phiDeg >= -180 && phiDeg <= 180, "the horizontal angle should be the range of [-180,180]");

  // compute the radiation power pattern using equations in table 7.3-1 in
  // 3GPP TR 38.901
  double A_M = 30; // front-back ratio expressed in dB
  double SLA = 30; // side-lobe level limit expressed in dB

  double A_v = -1 * std::min (SLA,12 * pow ((thetaDeg - 90) / 65,2)); // vertical cut of the radiation power pattern (dB)
  double A_h = -1 * std::min (A_M,12 * pow (phiDeg / 65,2)); // horizontal cut of the radiation power pattern (dB)

  double A = m_gE - 1 * std::min (A_M,- A_v - A_h); // 3D radiation power pattern (dB)

  return A; // 3D radiation power pattern in dB
} 
